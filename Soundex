
using System.Text.RegularExpressions;


namespace DmexCleaning
{
    public static class Soundex
    {
        public const string Empty = "";

        private static readonly Regex Sanitiser = new Regex(@"[^A-Z]", RegexOptions.Compiled);
        private static readonly Regex CollapseRepeatedNumbers = new Regex(@"(\d)?\1*[WH]*\1*", RegexOptions.Compiled);
        private static readonly Regex RemoveVowelSounds = new Regex(@"[AEIOUY]", RegexOptions.Compiled);

        public static string Generate(string incomingData = "")
        {

            if (String.IsNullOrEmpty(incomingData))
            {
                return Empty;
            }


            incomingData = incomingData.Replace("0", "zero");
            incomingData = incomingData.Replace("1", "one");
            incomingData = incomingData.Replace("2", "two");
            incomingData = incomingData.Replace("3", "three");
            incomingData = incomingData.Replace("4", "four");
            incomingData = incomingData.Replace("5", "five");
            incomingData = incomingData.Replace("6", "six");
            incomingData = incomingData.Replace("7", "seven");
            incomingData = incomingData.Replace("8", "eight");
            incomingData = incomingData.Replace("9", "nine");



            List<string> soundexCombo = new List<string>();

            string[] words = incomingData.Split(' ');


            foreach (string word in words)
            {
                // Remove non-alphas
                string Phrase = Sanitiser.Replace((word ?? string.Empty).ToUpper(), string.Empty).Trim();

                if (String.IsNullOrEmpty(Phrase))
                {
                    continue;
                }

                // Nothing to soundex, return empty
                if (string.IsNullOrEmpty(Phrase))
                    return Empty;

                // Convert consonants to numerical representation
                var Numified = Numify(Phrase);

                // Remove repeated numberics (characters of the same sound class), even if separated by H or W
                Numified = CollapseRepeatedNumbers.Replace(Numified, @"$1");

                if (Numified.Length > 0 && Numified[0] == Numify(Phrase[0]))
                {
                    // Remove first numeric as first letter in same class as subsequent letters
                    Numified = Numified.Substring(1);
                }

                // Remove vowels
                Numified = RemoveVowelSounds.Replace(Numified, string.Empty);

                // Concatenate, pad and trim to ensure X### format.
                soundexCombo.Add(string.Format("{0}{1}", Phrase[0], Numified).PadRight(4, '0').Substring(0, 4));
            }

            soundexCombo.RemoveAll(x => String.IsNullOrEmpty(x));


            if (soundexCombo.Count() > 0)
            {
                return String.Join(",", soundexCombo.ToArray());
            }
            else
            {
                return Empty;
            }
        }

        private static string Numify(string Phrase)
        {
            return new string(Phrase.ToCharArray().Select(Numify).ToArray());
        }

        private static char Numify(char Character)
        {
            switch (Character)
            {
                case 'B':
                case 'F':
                case 'P':
                case 'V':
                    return '1';
                case 'C':
                case 'G':
                case 'J':
                case 'K':
                case 'Q':
                case 'S':
                case 'X':
                case 'Z':
                    return '2';
                case 'D':
                case 'T':
                    return '3';
                case 'L':
                    return '4';
                case 'M':
                case 'N':
                    return '5';
                case 'R':
                    return '6';
                default:
                    return Character;
            }
        }
    }
}
